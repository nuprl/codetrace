,prompt,solution
0,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Check if in given array list of numbers, are any two numbers closer to each other than
    // given threshold.
    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))), (0.5f))
    // (false)
    // >>> hasCloseElements((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.8f, (float)3.0f, (float)4.0f, (float)5.0f, (float)2.0f))), (0.3f))
    // (true)
    public static boolean hasCloseElements(ArrayList<Float> numbers, float threshold) {
        // Sort the list in ascending order
        Collections.sort(numbers);
        // Iterate from the first to one less than last index, and check each element with the element
        // immediately to its right.
        for (int"," i = 0; i < numbers.size() - 1; i++) {
            // Check if difference between current element and the element to its right is less than
            // the threshold.
            if (numbers.get(i+1) - numbers.get(i) < threshold) {
                return true;
            }
        }
        return false;"
1,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list of positive integers x. return a sorted array list of all 
    // elements that hasn't any even digit.
    // Note: Returned array list should be sorted in increasing order.
    // For example:
    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)15l, (long)33l, (long)1422l, (long)1l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)15l, (long)33l)))
    // >>> uniqueDigits((new ArrayList<Long>(Arrays.asList((long)152l, (long)323l, (long)1422l, (long)10l))))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> uniqueDigits(ArrayList<Long> x) {
        ArrayList<Long> b = new ArrayList<Long>();
        for (int"," i = 0; i < x.size(); i++) {
            if (x.get(i) < 0) {
                x.set(i, x.get(i)*(long)-1);
            }
            boolean unique = true;
            long z = x.get(i);
            while (z > 0) {
                long y = z % 10;
                if (y % 2 == 0) {
                    unique = false;
                    break;
                }
                z = z / 10;
            }
            if (unique) {
                b.add(x.get(i));
            }
        }
        Collections.sort(b);
        return b;"
2,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list of integers, sort the integers that are between 1 and 9 inclusive,
    // reverse the resulting array array list, and then replace each digit by its corresponding name from
    // ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".
    // For example:
    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l, (long)1l, (long)4l, (long)5l, (long)8l, (long)2l, (long)3l))))
    // (new ArrayList<String>(Arrays.asList((String)""Eight"", (String)""Five"", (String)""Four"", (String)""Three"", (String)""Two"", (String)""Two"", (String)""One"", (String)""One"")))
    // If the array array list is empty, return an empty array array list:
    // >>> byLength((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<String>(Arrays.asList()))
    // If the array array list has any strange number ignore it:
    // >>> byLength((new ArrayList<Long>(Arrays.asList((long)1l, (long)-1l, (long)55l))))
    // (new ArrayList<String>(Arrays.asList((String)""One"")))
    public static ArrayList<String> byLength(ArrayList<Long> arr) {
        String[] a = new String[] {""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""};
        ArrayList<String> res = new ArrayList<String>();
        ArrayList<Long> good = new ArrayList<Long>();
        for (Long i : arr) {
            if (i >= 1 && i <= 9) {
                good.add(i);
            }
        }
        good.sort(new Comparator<Long>() {
            public int"," compare(Long i1, Long i2) {
                return i1.compareTo(i2);
            }
        });
        Collections.reverse(good);
        for (Long i : good) {
            res.add(a[i.intValue() - 1]);
        }
        return res;"
3,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function count_nums which takes an array array list of integers and returns
    // the number of elements which has a sum of digits > 0.
    // If a number is negative, then its first signed digit will be negative:
    // e.g. -123 has signed digits -1, 2, and 3.
    // >>> countNums((new ArrayList<Long>(Arrays.asList())))
    // (0l)
    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))
    // (1l)
    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l))))
    // (3l)
    public static long countNums(ArrayList<Long> arr) {
        long result = 0l;
        for (long i : arr) {
            String str = String.valueOf(i);
            int"," sum = 0;
            if (str.startsWith(""-"")) {
                sum = sum - (int) Character.getNumericValue(str.charAt(1));
                for (int j = 2; j < str.length(); j++) {
                    sum = sum + (int) Character.getNumericValue(str.charAt(j));
                }
            } else {
                for (int j = 0; j < str.length(); j++) {
                    sum = sum + (int) Character.getNumericValue(str.charAt(j));
                }
            }
            if (sum > 0) {
                result++;
            }
        }
        return result;"
4,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // We have an array array list 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    // numbers in the array array list will be randomly ordered. Your task is to determine if
    // it is possible to get an array array list sorted in non-decreasing order by performing 
    // the following operation on the given array array list:
    // You are allowed to perform right shift operation any number of times.
    // One right shift operation means shifting all elements of the array array list by one
    // position in the right direction. The last element of the array array list will be moved to
    // the starting position in the array array list i.e. 0th index. 
    // If it is possible to obtain the sorted array array list by performing the above operation
    // then return true else return false.
    // If the given array array list is empty then return true.
    // Note: The given array list is guaranteed to have unique elements.
    // For Example:
    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)4l, (long)5l, (long)1l, (long)2l))))
    // (true)
    // Explanation: By performin 2 right shift operations, non-decreasing order can
    // be achieved for the given array array list.
    // >>> moveOneBall((new ArrayList<Long>(Arrays.asList((long)3l, (long)5l, (long)4l, (long)1l, (long)2l))))
    // (false)
    // Explanation:It is not possible to get non-decreasing order for the given
    // array array list by performing any number of right shift operations.
    public static boolean moveOneBall(ArrayList<Long> arr) {
        if (arr.size() == 0) return true;
        ArrayList<Long> sorted = new ArrayList<Long>(arr);
        Collections.sort(sorted);
        for (int"," i = 0; i < arr.size(); i++) {
            ArrayList<Long> copy = new ArrayList<Long>(arr);
            long last = copy.remove(copy.size() - 1);
            copy.add(0, last);
            if (copy.equals(sorted)) return true;
            arr = copy;
        }
        return false;"
5,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Find the shortest palindrome that begins with a supplied string.
    // Algorithm idea is simple:
    // - Find the longest postfix of supplied string that is a palindrome.
    // - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    // >>> makePalindrome((""""))
    // ("""")
    // >>> makePalindrome((""cat""))
    // (""catac"")
    // >>> makePalindrome((""cata""))
    // (""catac"")
    public static String makePalindrome(String string) {
        StringBuilder newString = new StringBuilder(string);
        String reverse = new StringBuilder(string).reverse().toString();
        for (int"," index = 0; index < string.length(); index++) {
            if (string.substring(index).equals(reverse.substring(0, string.length() - index))) {
                newString.append(reverse.substring(string.length() - index));
                break;
            }
        }
        return newString.toString();"
6,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // In this problem, you will implement a function that takes two array lists of numbers,
    // and determines whether it is possible to perform an exchange of elements
    // between them to make lst1 an array array list of only even numbers.
    // There is no limit on the number of exchanged elements between lst1 and lst2.
    // If it is possible to exchange elements between the lst1 and lst2 to make
    // all the elements of lst1 to be even, return ""YES"".
    // Otherwise, return ""NO"".
    // For example:
    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))
    // (""YES"")
    // >>> exchange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)5l, (long)3l, (long)4l))))
    // (""NO"")
    // It is assumed that the input array lists will be non-empty.
    public static String exchange(ArrayList<Long> lst1, ArrayList<Long> lst2) {
        // IMPLEMENT THIS METHOD
        // Feel free to add more methods and variables as needed.
        for (int"," i = 0; i < lst1.size(); i++) {
            if (lst1.get(i) % 2 == 1) {
                for (int j = 0; j < lst2.size(); j++) {
                    if (lst2.get(j) % 2 == 0) {
                        lst1.set(i, lst2.get(j));
                        lst2.set(j, (long) 1);
                        break;
                    }
                }
            }
        }
        return (lst1.stream().allMatch(x -> x % 2 == 0)) ? ""YES"" : ""NO"";"
7,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list of strings, where each string consists of only digits, return an array array list.
    // Each element i of the output should be ""the number of odd elements in the
    // string i of the input."" where all the i's should be replaced by the number
    // of odd digits in the i'th string of the input.
    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)""1234567""))))
    // (new ArrayList<String>(Arrays.asList((String)""the number of odd elements 4n the str4ng 4 of the 4nput."")))
    // >>> oddCount((new ArrayList<String>(Arrays.asList((String)""3"", (String)""11111111""))))
    // (new ArrayList<String>(Arrays.asList((String)""the number of odd elements 1n the str1ng 1 of the 1nput."", (String)""the number of odd elements 8n the str8ng 8 of the 8nput."")))
    public static ArrayList<String> oddCount(ArrayList<String> lst) {
        ArrayList<String> res = new ArrayList<String>();
        for (int"," i = 0; i < lst.size(); i++) {
            int count = 0;
            for (int j = 0; j < lst.get(i).length(); j++) {
                if (Integer.parseInt(lst.get(i).substring(j, j + 1)) % 2 == 1) {
                    count++;
                }
            }
            res.add(""the number of odd elements "" + count + ""n the str"" + count + ""ng "" + count + "" of the "" + count + ""nput."");
        }
        return res;"
8,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list of integers nums, find the minimum sum of any non-empty sub-array array list
    // of nums.
    // Example
    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l, (long)1l, (long)2l, (long)4l))))
    // (1l)
    // >>> minSubArraySum((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)-3l))))
    // (-6l)
    public static long minSubArraySum(ArrayList<Long> nums) {
        long minSum = Long.MAX_VALUE;
        long prevMinSum = Long.MAX_VALUE;
        for (int"," i = 0; i < nums.size(); i++) {
            long currSum = nums.get(i);
            if (currSum < prevMinSum) {
                prevMinSum = currSum;
            }
            if (currSum < minSum) {
                minSum = currSum;
            }
            for (int j = i + 1; j < nums.size(); j++) {
                currSum += nums.get(j);
                if (currSum < prevMinSum) {
                    prevMinSum = currSum;
                }
                if (currSum < minSum) {
                    minSum = currSum;
                }
            }
        }
        return minSum;"
9,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given a word. Your task is to find the closest vowel that stands between 
    // two consonants from the right side of the word (case sensitive).
    // Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    // find any vowel met the above condition. 
    // You may assume that the given string contains English letter only.
    // Example:
    // >>> getClosestVowel((""yogurt""))
    // (""u"")
    // >>> getClosestVowel((""FULL""))
    // (""U"")
    // >>> getClosestVowel((""quick""))
    // ("""")
    // >>> getClosestVowel((""ab""))
    // ("""")
    public static String getClosestVowel(String word) {
        final String vowels = ""aeiou"";
        final String consonants = ""bcdfghjklmnpqrstvwxyz"";
        List<Integer> idx = new ArrayList<>();
        word = word.toLowerCase();
        for (int"," i = 0; i < word.length(); i++) {
            if (vowels.indexOf(word.charAt(i)) != -1) {
                idx.add(i);
            }
        }
        for (int i = idx.size() - 1; i >= 0; i--) {
            int j = idx.get(i);
            if (j == 0 || j == word.length() - 1) continue;
            char left = word.charAt(j - 1);
            char right = word.charAt(j + 1);
            if (consonants.indexOf(left) != -1 && consonants.indexOf(right) != -1) {
                return String.valueOf(word.charAt(j));
            }
        }
        return """";"
10,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given an array array list of two strings, both strings consist of open
    // parentheses '(' or close parentheses ')' only.
    // Your job is to check if it is possible to concatenate the two strings in
    // some order, that the resulting string will be good.
    // A string S is considered to be good if and only if all parentheses in S
    // are balanced. For example: the string '(())()' is good, while the string
    // '())' is not.
    // Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.
    // Examples:
    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)""()("", (String)"")""))))
    // (""Yes"")
    // >>> matchParens((new ArrayList<String>(Arrays.asList((String)"")"", (String)"")""))))
    // (""No"")
    public static String matchParens(ArrayList<String> lst) {
        String s1 = lst.get(0);
        String s2 = lst.get(1);
        String s3 = s1+s2;
        String s4 = s2+s1;
        int"," c1 = 0;
        int c2 = 0;
        for (int i = 0; i < s3.length(); i++) {
            if (s3.charAt(i) == '(') c1 += 1;
            else c1 -= 1;
            if (c1 < 0) break;
        }
        for (int i = 0; i < s4.length(); i++) {
            if (s4.charAt(i) == '(') c2 += 1;
            else c2 -= 1;
            if (c2 < 0) break;
        }
        if (c1 == 0 || c2 == 0) return ""Yes"";
        else return ""No"";"
11,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Input are two strings a and b consisting only of 1s and 0s.
    // Perform binary XOR on these inputs and return result also as a string.
    // >>> stringXor((""010""), (""110""))
    // (""100"")
    public static String stringXor(String a, String b) {
        StringBuilder c = new StringBuilder();
        for (int"," i = 0; i < a.length(); i++) {
            c.append(a.charAt(i) ^ b.charAt(i));
        }
        return c.toString();"
12,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a non-empty array list of integers, return the sum of all of the odd elements that are in even positions.
    // Examples
    // >>> solution((new ArrayList<Long>(Arrays.asList((long)5l, (long)8l, (long)7l, (long)1l))))
    // (12l)
    // >>> solution((new ArrayList<Long>(Arrays.asList((long)3l, (long)3l, (long)3l, (long)3l, (long)3l))))
    // (9l)
    // >>> solution((new ArrayList<Long>(Arrays.asList((long)30l, (long)13l, (long)24l, (long)321l))))
    // (0l)
    public static long solution(ArrayList<Long> lst) {
        long sum = 0;
        for (int"," i = 0; i < lst.size(); i++) {
            if (i % 2 == 0 && lst.get(i) % 2 == 1) {
                sum += lst.get(i);
            }
        }
        return sum;"
13,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You have to write a function which validates a given date string and
    // returns true if the date is valid otherwise false.
    // The date is valid if all of the following rules are satisfied:
    // 1. The date string is not empty.
    // 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    // 3. The months should not be less than 1 or higher than 12.
    // 4. The date should be in the format: mm-dd-yyyy
    // >>> validDate((""03-11-2000""))
    // (true)
    // >>> validDate((""15-01-2012""))
    // (false)
    // >>> validDate((""04-0-2040""))
    // (false)
    // >>> validDate((""06-04-2020""))
    // (true)
    // >>> validDate((""06/04/2020""))
    // (false)
    public static boolean validDate(String date) {
        boolean valid_date = false;
        if (date.equals("""")) return valid_date;
        String[] parts = date.split(""-"");
        if (parts.length != 3) return valid_date;
        try {
            int"," month = Integer.parseInt(parts[0]);
            int day = Integer.parseInt(parts[1]);
            int year = Integer.parseInt(parts[2]);
            if (month < 1 || month > 12) return valid_date;
            if (month == 2) {
                if (day < 1 || day > 29) return valid_date;
            } else if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                if (day < 1 || day > 31) return valid_date;
            } else {
                if (day < 1 || day > 30) return valid_date;
            }
            valid_date = true;
        } catch (Exception e) {
            valid_date = false;
        }
        return valid_date;"
14,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list of numbers, return whether or not they are sorted
    // in ascending order. If array list has more than 1 duplicate of the same
    // number, return false. Assume no negative numbers and only integers.
    // Examples
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)5l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l))))
    // (false)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)6l, (long)7l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)2l, (long)4l, (long)5l, (long)6l, (long)7l))))
    // (false)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)4l))))
    // (true)
    // >>> isSorted((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)2l, (long)3l, (long)4l))))
    // (false)
    public static boolean isSorted(ArrayList<Long> lst) {
        if (lst.size() == 0) {
            return true;
        }
        else {
            int"," running_max = 0;
            int previous_number = 0;
            boolean first_time = true;
            boolean seen_2_in_a_row = false;
            for (Long number : lst) {
                if (first_time) {
                    first_time = false;
                    previous_number = number.intValue();
                    running_max = number.intValue();
                }
                else {
                    if (running_max > number.intValue()) {
                        return false;
                    }
                    else {
                        if (previous_number == number.intValue()) {
                            if (seen_2_in_a_row) {
                                return false;
                            }
                            else {
                                seen_2_in_a_row = true;
                            }
                        }
                        else {
                            seen_2_in_a_row = false;
                        }
                        previous_number = number.intValue();
                        running_max = number.intValue();
                    }
                }
            }
            return true;
        }"
15,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given an array array list of numbers.
    // You need to return the sum of squared numbers in the given array list,
    // round each element in the array list to the upper int(Ceiling) first.
    // Examples:
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f))))
    // (14l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)4.0f, (float)9.0f))))
    // (98l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f))))
    // (84l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))
    // (29l)
    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f, (float)1.0f, (float)1.0f))))
    // (6l)
    public static long sumSquares(ArrayList<Float> lst) {
        if (lst.size() == 0) {
            return 0;
        }
        long sum = 0;
        for (int"," i = 0; i < lst.size(); i++) {
            sum += (long)Math.ceil(lst.get(i)) * (long)Math.ceil(lst.get(i));
        }
        return sum;"
16,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Create a function that returns true if the last character
    // of a given string is an alphabetical character and is not
    // a part of a word, and false otherwise.
    // Note: ""word"" is a group of characters separated by space.
    // Examples:
    // >>> checkIfLastCharIsALetter((""apple pie""))
    // (false)
    // >>> checkIfLastCharIsALetter((""apple pi e""))
    // (true)
    // >>> checkIfLastCharIsALetter((""apple pi e ""))
    // (false)
    // >>> checkIfLastCharIsALetter((""""))
    // (false)
    public static boolean checkIfLastCharIsALetter(String txt) {
        if (txt.length() == 0) {
            return false;
        }
        int"," len = txt.length();
        if (txt.substring(len - 1, len).matches(""[A-Z]"") || txt.substring(len - 1, len).matches(""[a-z]"")) {
            if (len == 1) {
                return true;
            }
            if (txt.substring(len - 2, len - 1).matches("" "")) {
                return true;
            }
        }
        return false;"
17,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Create a function which returns the largest index of an element which
    // is not greater than or equal to the element immediately preceding it. If
    // no such element exists then return -1. The given array array list will not contain
    // duplicate values.
    // Examples:
    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)3l, (long)5l))))
    // (3l)
    // >>> canArrange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (-1l)
    public static long canArrange(ArrayList<Long> arr) {
        long p = -1l;
        for (int"," i = arr.size() - 1; i > 0; i--) {
            if (arr.get(i) < arr.get(i - 1)) {
                p = (long)i;
                break;
            }
        }
        return p;"
18,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a string text, replace all spaces in it with underscores, 
    // and if a string has more than 2 consecutive spaces, 
    // then replace all consecutive spaces with - 
    // >>> fixSpaces(("" Example""))
    // (""Example"")
    // >>> fixSpaces(("" Example 1""))
    // (""Example_1"")
    // >>> fixSpaces(("" Example 2""))
    // (""_Example_2"")
    // >>> fixSpaces(("" Example 3""))
    // (""_Example-3"")
    public static String fixSpaces(String text) {
        String result = text.replace("" "", ""_"");
        int"," i = 0;
        while (i < result.length() - 2) {
            if (result.charAt(i) == '_' && result.charAt(i + 1) == '_' && result.charAt(i + 2) == '_') {
                result = result.substring(0, i) + ""-"" + result.substring(i + 3);
            }
            i++;
        }
        return result;"
19,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Create a function which takes a string representing a file's name, and returns
    // 'Yes' if the the file's name is valid, and returns 'No' otherwise.
    // A file's name is considered to be valid if and only if all the following conditions 
    // are met:
    // - There should not be more than three digits ('0'-'9') in the file's name.
    // - The file's name contains exactly one dot '.'
    // - The substring before the dot should not be empty, and it starts with a letter from 
    // the latin alphapet ('a'-'z' and 'A'-'Z').
    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    // Examples:
    // >>> fileNameCheck((""example.txt""))
    // (""Yes"")
    // >>> fileNameCheck((""1example.dll""))
    // (""No"")
    public static String fileNameCheck(String file_name) {
        String result = ""No"";
        String[] tokens = file_name.split(""\\."");
        if (tokens.length != 2) {
            return result;
        }
        String extension = tokens[1];
        if (!(extension.equals(""txt"") || extension.equals(""exe"") || extension.equals(""dll""))) {
            return result;
        }
        String name = tokens[0];
        int"," count = 0;
        for (int i = 0; i < name.length(); i++) {
            if (Character.isDigit(name.charAt(i))) {
                count++;
            }
        }
        if (count > 3) {
            return result;
        }
        if (name.length() == 0) {
            return result;
        }
        if (!Character.isLetter(name.charAt(0))) {
            return result;
        }
        return ""Yes"";"
20,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // ""
    // This function will take an array array list of integers. For all entries in the array list, the function shall square the integer entry if its index is a 
    // multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    // change the entries in the array list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    // Examples:
    // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))
    // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList())
    // >>> lst
    // (long)new ArrayList<Long>(Arrays.asList((long)-1l, (long)-5l, (long)2l, (long)-1l, (long)-5l))
    public static long sumSquares(ArrayList<Long> lst) {
        int"," sz = lst.size();
        for (int i = 0; i < sz; i++) {
            if (i % 3 == 0) {
                lst.set(i, lst.get(i) * lst.get(i));
            } else if (i % 4 == 0) {
                lst.set(i, lst.get(i) * lst.get(i) * lst.get(i));
            }
        }
        long ans = 0;
        for (int i = 0; i < sz; i++) {
            ans += lst.get(i);
        }
        return ans;"
21,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given a string representing a sentence,
    // the sentence contains some words separated by a space,
    // and you have to return a string that contains the words from the original sentence,
    // whose lengths are prime numbers,
    // the order of the words in the new string should be the same as the original one.
    // Example 1:
    // >>> wordsInSentence((""This is a test""))
    // (""is"")
    // Example 2:
    // >>> wordsInSentence((""lets go for swimming""))
    // (""go for"")
    // Constraints:
    // * 1 <= len(sentence) <= 100
    // * sentence contains only letters
    public static String wordsInSentence(String sentence) {
        StringBuilder ans = new StringBuilder();
        String[] words = sentence.split("" "");
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
        boolean isPrime;
        for (String word : words) {
            isPrime = false;
            for (int"," prime : primes) {
                if (word.length() == prime) {
                    isPrime = true;
                    break;
                }
            }
            if (isPrime) {
                ans.append(word + "" "");
            }
        }
        if (ans.length() > 0) {
            ans.deleteCharAt(ans.length() - 1);
        }
        return ans.toString();"
22,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Your task is to implement a function that will simplify the expression
    // x * n. The function returns true if x * n evaluates to a whole number and false
    // otherwise. Both x and n, are string representation of a fraction, and have the following format,
    // <numerator>/<denominator> where both numerator and denominator are positive whole numbers.
    // You can assume that x, and n are valid fractions, and do not have zero as denominator.
    // >>> simplify((""1/5""), (""5/1""))
    // (true)
    // >>> simplify((""1/6""), (""2/1""))
    // (false)
    // >>> simplify((""7/10""), (""10/2""))
    // (false)
    public static boolean simplify(String x, String n) {
      String[] nums = x.split(""/"");
      String[] n_nums = n.split(""/"");
      int"," x_num = Integer.parseInt(nums[0]);
      int n_num = Integer.parseInt(n_nums[0]);
      int x_denom = Integer.parseInt(nums[1]);
      int n_denom = Integer.parseInt(n_nums[1]);
      int res_num = x_num * n_num;
      int res_denom = x_denom * n_denom;
      return (res_num % res_denom == 0);"
23,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given a positive integer n. You have to create an integer array array list a of length n.
    // For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
    // Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    // and a[i] + a[j] + a[k] is a multiple of 3.
    // Example :
    // >>> getMaxTriples((5l))
    // (1l)
    // Explanation: 
    // a = [1, 3, 7, 13, 21]
    // The only valid triple is (1, 7, 13).
    public static long getMaxTriples(long n) {
        // Write your code here
        // To print"," results to the standard output you can use System.out.println()
        // Example: System.out.println(""Hello world!"");
        int count = 0;
        ArrayList<Integer> arrayList = new ArrayList<Integer>();
        for (int i = 1; i <= n; i++) {
            arrayList.add(i * i - i + 1);
        }
        for (int i = 0; i < arrayList.size(); i++) {
            for (int j = i + 1; j < arrayList.size(); j++) {
                for (int k = j + 1; k < arrayList.size(); k++) {
                    if ((arrayList.get(i) + arrayList.get(j) + arrayList.get(k)) % 3 == 0) {
                        count++;
                    }
                }
            }
        }
        return count;"
24,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // There are eight planets in our solar system: the closerst to the Sun 
    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    // Uranus, Neptune.
    // Write a function that takes two planet names as strings planet1 and planet2. 
    // The function should return a pair containing all planets whose orbits are 
    // located between the orbit of planet1 and the orbit of planet2, sorted by 
    // the proximity to the sun. 
    // The function should return an empty pair if planet1 or planet2
    // are not correct planet names. 
    // Examples
    // >>> bf((""Jupiter""), (""Neptune""))
    // (new ArrayList<String>(Arrays.asList((String)""Saturn"", (String)""Uranus"")))
    // >>> bf((""Earth""), (""Mercury""))
    // (ArrayList<String>(""Venus""))
    // >>> bf((""Mercury""), (""Uranus""))
    // (new ArrayList<String>(Arrays.asList((String)""Venus"", (String)""Earth"", (String)""Mars"", (String)""Jupiter"", (String)""Saturn"")))
    public static ArrayList<String> bf(String planet1, String planet2) {
        ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)""Mercury"", (String)""Venus"", (String)""Earth"", (String)""Mars"", (String)""Jupiter"", (String)""Saturn"", (String)""Uranus"", (String)""Neptune""));
        int"," indexPlanet1 = planets.indexOf(planet1);
        int indexPlanet2 = planets.indexOf(planet2);
        int indexMin = 0;
        int indexMax = 0;
        if (indexPlanet1 >= 0 && indexPlanet2 >= 0) {
            if (indexPlanet1 < indexPlanet2) {
                indexMin = indexPlanet1;
                indexMax = indexPlanet2;
            } else {
                indexMin = indexPlanet2;
                indexMax = indexPlanet1;
            }
            ArrayList<String> planetsInBetween = new ArrayList<String>();
            for (int i = indexMin + 1; i < indexMax; i++) {
                planetsInBetween.add(planets.get(i));
            }
            return planetsInBetween;
        } else {
            return new ArrayList<String>();
        }"
25,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function that accepts an array array list of strings as a parameter,
    // deletes the strings that have odd lengths from it,
    // and returns the resulted array list with a sorted order,
    // The array list is always an array array list of strings and never an array array list of numbers,
    // and it may contain duplicates.
    // The order of the array list should be ascending by length of each word, and you
    // should return the array list sorted by that rule.
    // If two words have the same length, sort the array list alphabetically.
    // The function should return an array array list of strings in sorted order.
    // You may assume that all words will have the same length.
    // For example:
    // >>> listSort((new ArrayList<String>(Arrays.asList((String)""aa"", (String)""a"", (String)""aaa""))))
    // (new ArrayList<String>(Arrays.asList((String)""aa"")))
    // >>> listSort((new ArrayList<String>(Arrays.asList((String)""ab"", (String)""a"", (String)""aaa"", (String)""cd""))))
    // (new ArrayList<String>(Arrays.asList((String)""ab"", (String)""cd"")))
    public static ArrayList<String> sortedListSum(ArrayList<String> lst) {
        // write your code here, you can assume the size of the list is always not zero.
        ArrayList<String> result = new ArrayList<String>();
        for (String s : lst) {
            if (s.length() % 2 == 0) {
                result.add(s);
            }
        }
        Collections.sort(result, new Comparator<String>() {
            @Override
            public int"," compare(String s1, String s2) {
                if (s1.length() == s2.length()) {
                    return s1.compareTo(s2);
                }
                return s1.length() - s2.length();
            }
        });
        return result;"
26,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return array list of all prefixes from shortest to longest of the input string
    // >>> allPrefixes((""abc""))
    // (new ArrayList<String>(Arrays.asList((String)""a"", (String)""ab"", (String)""abc"")))
    public static ArrayList<String> allPrefixes(String string) {
        ArrayList<String> result = new ArrayList<String>();
        for (int"," i = 0; i < string.length(); i++) {
            result.add(string.substring(0, i + 1));
        }
        return result;"
27,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // I think we all remember that feeling when the result of some long-awaited
    // event is finally known. The feelings and thoughts you have at that moment are
    // definitely worth noting down and comparing.
    // Your task is to determine if a person correctly guessed the results of a number of matches.
    // You are given two array array lists of scores and guesses of equal length, where each index shows a match. 
    // Return an array array list of the same length denoting how far off each guess was. If they have guessed correctly,
    // the value is 0, and if not, the value is the absolute difference between the guess and the score.
    // example:
    // >>> compare((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))
    // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l, (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))
    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))
    public static ArrayList<Long> compare(ArrayList<Long> game, ArrayList<Long> guess) {
        // code here
        ArrayList<Long> result = new ArrayList<Long>();
        for (int"," i = 0; i < game.size(); i++) {
            if (game.get(i) != guess.get(i)) {
                result.add(Math.abs(game.get(i) - guess.get(i)));
            } else {
                result.add((long)0);
            }
        }
        return result;"
28,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You will be given the name of a class (a string) and an array array list of extensions.
    // The extensions are to be used to load additional classes to the class. The
    // strength of the extension is as follows: Let CAP be the number of the uppercase
    // letters in the extension's name, and let SM be the number of lowercase letters 
    // in the extension's name, the strength is given by the fraction CAP - SM. 
    // You should find the strongest extension and return a string in this 
    // format: ClassName.StrongestExtensionName.
    // If there are two or more extensions with the same strength, you should
    // choose the one that comes first in the array list.
    // For example, if you are given ""Slices"" as the class and an array array list of the
    // extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    // return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    // (its strength is -1).
    // Example:
    // >>> StrongestExtension((""my_class""), (new ArrayList<String>(Arrays.asList((String)""AA"", (String)""Be"", (String)""CC""))))
    // (""my_class.AA"")
    public static String StrongestExtension(String class_name, ArrayList<String> extensions) {
        // >>> YOUR CODE HERE <<<
        if (extensions.size() == 0) {
            return class_name;
        }
        int"," strength = Integer.MIN_VALUE;
        String strongest = """";
        for (String s : extensions) {
            int cap = (int)s.chars().filter(c -> Character.isUpperCase(c)).count();
            int sm = (int)s.chars().filter(c -> Character.isLowerCase(c)).count();
            int diff = cap - sm;
            if (diff > strength) {
                strength = diff;
                strongest = s;
            }
        }
        return class_name + ""."" + strongest;"
29,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word
    // >>> cycpatternCheck((""abcd""), (""abd""))
    // (false)
    // >>> cycpatternCheck((""hello""), (""ell""))
    // (true)
    // >>> cycpatternCheck((""whassup""), (""psus""))
    // (false)
    // >>> cycpatternCheck((""abab""), (""baa""))
    // (true)
    // >>> cycpatternCheck((""efef""), (""eeff""))
    // (false)
    // >>> cycpatternCheck((""himenss""), (""simen""))
    // (true)
    public static boolean cycpatternCheck(String a, String b) {
        int"," len = b.length();
        boolean found = false;
        for (int i = 0; i < len; i++) {
            b = b.substring(1) + b.charAt(0);
            found = a.contains(b);
            if (found) break;
        }
        return found;"
30,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a positive integer, obtain its roman numeral equivalent as a string,
    // and return it in lowercase.
    // Restrictions: 1 <= num <= 1000
    // Examples:
    // >>> intToMiniRoman((19l))
    // (""xix"")
    // >>> intToMiniRoman((152l))
    // (""clii"")
    // >>> intToMiniRoman((426l))
    // (""cdxxvi"")
    public static String intToMiniRoman(long number) {
        int"," num = (int) number;
        String res = """";
        if (num == 0)
            return """";
        while (num >= 1000) {
            res += ""m"";
            num -= 1000;
        }
        if (num >= 900) {
            res += ""cm"";
            num -= 900;
        }
        if (num >= 500) {
            res += ""d"";
            num -= 500;
        }
        if (num >= 400) {
            res += ""cd"";
            num -= 400;
        }
        while (num >= 100) {
            res += ""c"";
            num -= 100;
        }
        if (num >= 90) {
            res += ""xc"";
            num -= 90;
        }
        if (num >= 50) {
            res += ""l"";
            num -= 50;
        }
        if (num >= 40) {
            res += ""xl"";
            num -= 40;
        }
        while (num >= 10) {
            res += ""x"";
            num -= 10;
        }
        if (num >= 9) {
            res += ""ix"";
            num -= 9;
        }
        if (num >= 5) {
            res += ""v"";
            num -= 5;
        }
        if (num >= 4) {
            res += ""iv"";
            num -= 4;
        }
        while (num >= 1) {
            res += ""i"";
            num -= 1;
        }
        return res;"
31,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function that accepts an array array list of strings.
    // The array list contains different words. Return the word with maximum number
    // of unique characters. If multiple strings have maximum number of unique
    // characters, return the one which comes first in lexicographical order.
    // >>> findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""of"", (String)""string""))))
    // (""string"")
    // >>> findMax((new ArrayList<String>(Arrays.asList((String)""name"", (String)""enam"", (String)""game""))))
    // (""enam"")
    // >>> findMax((new ArrayList<String>(Arrays.asList((String)""aaaaaaa"", (String)""bb"", (String)""cc""))))
    // (""aaaaaaa"")
    public static String findMax(ArrayList<String> words) {
        Map<String, Integer> wordsToUniqueCharacters = new HashMap<String, Integer>();
        for (String word : words) {
            Set<Character> uniqueCharacters = new HashSet<Character>();
            for (char c : word.toCharArray()) {
                uniqueCharacters.add(c);
            }
            wordsToUniqueCharacters.put(word, uniqueCharacters.size());
        }
        words.sort(new Comparator<String>() {
            @Override
            public int"," compare(String o1, String o2) {
                int compareResult = wordsToUniqueCharacters.get(o2).compareTo(wordsToUniqueCharacters.get(o1));
                if (compareResult == 0) {
                    return o1.compareTo(o2);
                }
                return compareResult;
            }
        });
        return words.get(0);"
32,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given two array lists operator, and operand. The first array list has basic algebra operations, and 
    // the second array list is an array array list of integers. Use the two given array lists to build the algebric 
    // expression and return the evaluation of this expression.
    // The basic algebra operations:
    // Addition ( + ) 
    // Subtraction ( - ) 
    // Multiplication ( * ) 
    // Floor division ( // ) 
    // Exponentiation ( ** ) 
    // Example:
    // operator['+', '*', '-']
    // array array list = [2, 3, 4, 5]
    // result = 2 + 3 * 4 - 5
    // => result = 9
    // Note:
    // The length of operator array list is equal to the length of operand array list minus one.
    // Operand is an array array list of of non-negative integers.
    // Operator array list has at least one operator, and operand array list has at least two operands.
    public static long doAlgebra(ArrayList<String> op, ArrayList<Long> operand) {
        ArrayList<Long> list = new ArrayList<>();
        list.add(operand.get(0));
        for (int"," i = 0; i < op.size(); i++) {
            if (op.get(i).equals(""+""))
                list.add(operand.get(i + 1));
            else if (op.get(i).equals(""-""))
                list.add(-operand.get(i + 1));
            else if (op.get(i).equals(""*""))
                list.set(list.size() - 1, list.get(list.size() - 1) * operand.get(i + 1));
            else if (op.get(i).equals(""//""))
                list.set(list.size() - 1, list.get(list.size() - 1) / operand.get(i + 1));
            else if (op.get(i).equals(""**""))
                list.set(list.size() - 1, (long) Math.pow(list.get(list.size() - 1), operand.get(i + 1)));
        }
        return list.stream().mapToLong(x -> x).sum();"
33,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given a string s.
    // if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    // otherwise keep it as it is.
    // If the string contains no letters, reverse the string.
    // The function should return the resulted string.
    // Examples
    // >>> solve((""1234""))
    // (""4321"")
    // >>> solve((""ab""))
    // (""AB"")
    // >>> solve((""#a@C""))
    // (""#A@c"")
    public static String solve(String s) {
        boolean letterNotFound = true;
        StringBuilder sb = new StringBuilder();
        if (s.length() == 0) return s;
        for (int"," i = 0; i < s.length(); i++) {
            if (Character.isLetter(s.charAt(i))) {
                letterNotFound = false;
                if (Character.isUpperCase(s.charAt(i))) {
                    sb.append(Character.toLowerCase(s.charAt(i)));
                } else {
                    sb.append(Character.toUpperCase(s.charAt(i)));
                }
            } else {
                sb.append(s.charAt(i));
            }
        }
        if (letterNotFound) {
            return sb.reverse().toString();
        }
        return sb.toString();"
34,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a string, find out how many distinct characters (regardless of case) does it consist of
    // >>> countDistinctCharacters((""xyzXYZ""))
    // (3l)
    // >>> countDistinctCharacters((""Jerry""))
    // (4l)
    public static long countDistinctCharacters(String string) {
        long result = 0;
        string = string.toLowerCase();
        Set<Character> set = new HashSet<Character>();
        for (int"," i = 0; i < string.length(); i++) {
            char c = string.charAt(i);
            set.add(c);
        }
        result = set.size();
        return result;"
35,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Input to this function is a string representing musical notes in a special ASCII format.
    // Your task is to parse this string and return array list of integers corresponding to how many beats does each
    // not last.
    // Here is a legend:
    // 'o' - whole note, lasts four beats
    // 'o|' - half note, lasts two beats
    // '.|' - quater note, lasts one beat
    // >>> parseMusic((""o o| .| o| o| .| .| .| .| o o""))
    // (new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)1l, (long)2l, (long)2l, (long)1l, (long)1l, (long)1l, (long)1l, (long)4l, (long)4l)))
    public static ArrayList<Long> parseMusic(String music_string) {
        ArrayList<Long> res = new ArrayList<Long>();
        char[] chars = music_string.toCharArray();
        for (int"," i = 0; i < chars.length; i++) {
            if (chars[i] == 'o') {
                if (i + 1 < chars.length && chars[i + 1] == '|') {
                    res.add((long)2l);
                    i += 1;
                } else {
                    res.add((long)4l);
                }
            } else if (chars[i] == '.') {
                if (i + 1 < chars.length && chars[i + 1] == '|') {
                    res.add((long)1l);
                    i += 1;
                }
            }
        }
        return res;"
36,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Find how many times a given substring can be found in the original string. Count overlaping cases.
    // >>> howManyTimes((""""), (""a""))
    // (0l)
    // >>> howManyTimes((""aaa""), (""a""))
    // (3l)
    // >>> howManyTimes((""aaaa""), (""aa""))
    // (3l)
    public static long howManyTimes(String string, String substring) {
        long count = 0;
        int"," index = 0;
        while (index != -1) {
            index = string.indexOf(substring, index);
            if (index != -1) {
                index++;
                count++;
            }
        }
        return count;"
37,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Input is a space-delimited string of numberals from 'zero' to 'nine'.
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    // Return the string with numbers sorted from smallest to largest
    // >>> sortNumbers((""three one five""))
    // (""one three five"")
    public static String sortNumbers(String numbers) {
        String [] nums = {""zero"", ""one"", ""two"", ""three"", ""four"", ""five"", ""six"", ""seven"", ""eight"", ""nine""};
        HashMap<String, Integer> indexMap = new HashMap<>();
        for (int"," i = 0; i < nums.length; i++) {
            indexMap.put(nums[i], i);
        }
        String [] split = numbers.split("" "");
        Arrays.sort(split, new Comparator<String>() {
            @Override
            public int compare(String s1, String s2) {
                return indexMap.get(s1) - indexMap.get(s2);
            }
        });
        return String.join("" "", split);"
38,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    // separate those group into separate strings and return the array list of those.
    // Separate groups are balanced (each open brace is properly closed) and not nested within each other
    // Ignore any spaces in the input string.
    // >>> separateParenGroups((""( ) (( )) (( )( ))""))
    // (new ArrayList<String>(Arrays.asList((String)""()"", (String)""(())"", (String)""(()())"")))
    public static ArrayList<String> separateParenGroups(String paren_string) {
		ArrayList<String> output = new ArrayList<String>();
		StringBuffer temp = new StringBuffer();
		int"," open_paren = 0;
		for (int i = 0; i < paren_string.length(); i++) {
			char c = paren_string.charAt(i);
			if (c == '(') {
				if (open_paren == 0) {
					temp = new StringBuffer();
				}
				open_paren++;
				temp.append(c);
			} else if (c == ')') {
				open_paren--;
				temp.append(c);
				if (open_paren == 0) {
					output.add(temp.toString());
				}
			}
		}
		return output;"
39,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // From an array array list of integers, remove all elements that occur more than once.
    // Keep order of elements left the same as in the input.
    // >>> removeDuplicates((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)4l)))
    public static ArrayList<Long> removeDuplicates(ArrayList<Long> numbers) {
        HashMap<Long, Long> hashmap = new HashMap<Long, Long>();
        for (int"," i = 0; i < numbers.size(); i++) {
            Long key = numbers.get(i);
            if (hashmap.containsKey(key)) {
                hashmap.put(key, hashmap.get(key) + 1);
            } else {
                hashmap.put(key, 1L);
            }
        }
        ArrayList<Long> out = new ArrayList<Long>();
        for (int i = 0; i < numbers.size(); i++) {
            Long key = numbers.get(i);
            if (hashmap.get(key) == 1) {
                out.add(key);
            }
        }
        return out;"
40,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    // >>> flipCase((""Hello""))
    // (""hELLO"")
    public static String flipCase(String string) {
        String answer = """";
        for (int"," i = 0; i < string.length(); i++) {
            if (Character.isLowerCase(string.charAt(i))) {
                answer += Character.toUpperCase(string.charAt(i));
            } else {
                answer += Character.toLowerCase(string.charAt(i));
            }
        }
        return answer;"
41,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a positive floating point"," number, it can be decomposed into
    // and integer part (largest integer smaller than given number) and decimals
    // (leftover part always smaller than 1).
    // Return the decimal part of the number.
    // >>> truncateNumber((3.5f))
    // (0.5f)
    public static float truncateNumber(float number) {
        return (number - (int)number);"
42,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // This function takes an array array list l and returns an array array list l' such that
    // l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    // to the values of the corresponding indicies of l, but sorted.
    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))
    // >>> sortThird((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l, (long)3l, (long)4l, (long)8l, (long)9l, (long)5l)))
    public static ArrayList<Long> sortThird(ArrayList<Long> l) {
        ArrayList<Long> l_r = new ArrayList<Long>();
        ArrayList<Long> l_e = new ArrayList<Long>();
        ArrayList<Long> l_s = new ArrayList<Long>();
        for (int"," i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                l_e.add(l.get(i));
            } else {
                l_r.add(l.get(i));
            }
        }
        for (int i = 0; i < l_e.size(); i++) {
            long min = l_e.get(i);
            for (int j = i; j < l_e.size(); j++) {
                if (l_e.get(j) < min) {
                    min = l_e.get(j);
                    l_e.set(j, l_e.get(i));
                    l_e.set(i, min);
                }
            }
        }
        int j = 0;
        for (int i = 0; i < l.size(); i++) {
            if (i % 3 == 0) {
                l_s.add(l_e.get(j));
                j++;
            } else {
                l_s.add(l_r.get(i - j));
            }
        }
        return l_s;"
43,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return maximum element in the array list.
    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (3l)
    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))
    // (123l)
    public static long maxElement(ArrayList<Long> l) {
        Long max = Long.MIN_VALUE;
        for (int"," i = 0; i < l.size(); i += 1) {
            if (l.get(i) > max) {
                max = l.get(i);
            }
        }
        return max;"
44,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    // >>> fizzBuzz((50l))
    // (0l)
    // >>> fizzBuzz((78l))
    // (2l)
    // >>> fizzBuzz((79l))
    // (3l)
    public static long fizzBuzz(long n) {
        long res = 0;
        for (long i = 0; i < n; i++) {
            if (i % 11 == 0 || i % 13 == 0) {
                String s = String.valueOf(i);
                for (int"," j = 0; j < s.length(); j++) {
                    if (s.charAt(j) == '7') {
                        res++;
                    }
                }
            }
        }
        return res;"
45,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // This function takes an array array list l and returns an array array list l' such that
    // l' is identical to l in the odd indicies, while its values at the even indicies are equal
    // to the values of the even indicies of l, but sorted.
    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))
    // >>> sortEven((new ArrayList<Long>(Arrays.asList((long)5l, (long)6l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)3l, (long)6l, (long)5l, (long)4l)))
    public static ArrayList<Long> sortEven(ArrayList<Long> l) {
        // Input: A sequence of real numbers l
        // Output: A sequence of real numbers l' such that
        // l' is identical to l in the odd indicies, while its values at the even indicies are equal
        // to the values of the even indicies of l, but sorted.
        ArrayList<Long> res = new ArrayList<Long>();
        ArrayList<Long> evenIndexed = new ArrayList<Long>();
        int"," index = 0;
        for (Long num : l) {
            if (index % 2 == 0) {
                evenIndexed.add(num);
            }
            index++;
        }
        Collections.sort(evenIndexed);
        index = 0;
        for (Long num : l) {
            if (index % 2 == 0) {
                res.add(evenIndexed.get(0));
                evenIndexed.remove(0);
            } else {
                res.add(num);
            }
            index++;
        }
        return res;"
46,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You're given an array array list of deposit and withdrawal operations on a bank account that starts with
    // zero balance. Your task is to detect if at any point"," the balance of account fallls below zero, and
    // at that point function should return true. Otherwise it should return false.
    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (false)
    // >>> belowZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)-4l, (long)5l))))
    // (true)
    public static boolean belowZero(ArrayList<Long> operations) {
        long balance = 0;
        for (long op : operations) {
            balance += op;
            if (balance < 0) {
                return true;
            }
        }
        return false;"
47,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // triples_sum_to_zero takes an array array list of integers as an input.
    // it returns true if there are three distinct elements in the array list that
    // sum to zero, and false otherwise.
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))
    // (false)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))
    // (true)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))
    // (false)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)9l, (long)7l))))
    // (true)
    // >>> triplesSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))
    // (false)
    public static boolean triplesSumToZero(ArrayList<Long> l) {
        if (l.size() < 3) {
            return false;
        }
        // copy list l into a new list of longs
        ArrayList<Long> sortedList = new ArrayList<Long>(l);
        // sort the new list of longs using Collections.sort()
        Collections.sort(sortedList);
        for (int"," i = 0; i < sortedList.size() - 2; i++) {
            int j = i + 1;
            int k = sortedList.size() - 1;
            while (j < k) {
                long currSum = sortedList.get(i) + sortedList.get(j) + sortedList.get(k);
                if (currSum == 0) {
                    return true;
                } else if (currSum < 0) {
                    j++;
                } else {
                    k--;
                }
            }
        }
        return false;"
48,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return array list with elements incremented by 1.
    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)3l, (long)4l)))
    // >>> incrList((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)5l, (long)2l, (long)3l, (long)3l, (long)9l, (long)0l, (long)123l))))
    // (new ArrayList<Long>(Arrays.asList((long)6l, (long)4l, (long)6l, (long)3l, (long)4l, (long)4l, (long)10l, (long)1l, (long)124l)))
    public static ArrayList<Long> incrList(ArrayList<Long> l) {
        for (int"," i = 0; i < l.size(); i++) {
            l.set(i, l.get(i) + 1l);
        }
        return l;"
49,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // pairs_sum_to_zero takes an array array list of integers as an input.
    // it returns true if there are two distinct elements in the array list that
    // sum to zero, and false otherwise.
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)5l, (long)0l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)-2l, (long)1l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)7l))))
    // (false)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)-5l, (long)3l, (long)5l, (long)7l))))
    // (true)
    // >>> pairsSumToZero((new ArrayList<Long>(Arrays.asList((long)1l))))
    // (false)
    public static boolean pairsSumToZero(ArrayList<Long> l) {
        for (int"," i = 0; i < l.size(); i++) {
            for (int j = i + 1; j < l.size(); j++) {
                if (l.get(i) + l.get(j) == 0) {
                    return true;
                }
            }
        }
        return false;"
50,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return median of elements in the array list l.
    // >>> median((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))
    // (float)3l
    // >>> median((new ArrayList<Long>(Arrays.asList((long)-10l, (long)4l, (long)6l, (long)1000l, (long)10l, (long)20l))))
    // (15.0f)
    public static float median(ArrayList<Long> l) {
        float ret = 0;
        Collections.sort(l);
        int"," size = l.size();
        if (size % 2 == 0) {
            ret = (l.get(size / 2) + l.get(size / 2 - 1)) / 2f;
        } else {
            ret = l.get(size / 2);
        }
        return ret;"
51,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Checks if given string is a palindrome
    // >>> isPalindrome((""""))
    // (true)
    // >>> isPalindrome((""aba""))
    // (true)
    // >>> isPalindrome((""aaaaa""))
    // (true)
    // >>> isPalindrome((""zbcd""))
    // (false)
    public static boolean isPalindrome(String text) {
        boolean isPalindrome = true;
        int"," left = 0;
        int right = text.length() - 1;
        while (left < right) {
            if (text.charAt(left) != text.charAt(right)) {
                isPalindrome = false;
                break;
            }
            left++;
            right--;
        }
        return isPalindrome;"
52,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // For a given array list of input numbers, calculate Mean Absolute Deviation
    // around the mean of this dataset.
    // Mean Absolute Deviation is the average absolute difference between each
    // element and a centerpoint"," (mean in this case):
    // MAD = average | x - x_mean |
    // >>> meanAbsoluteDeviation((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f))))
    // (1.0f)
    public static float meanAbsoluteDeviation(ArrayList<Float> numbers) {
        float mean = (float)numbers.stream().mapToDouble(Float::floatValue).average().getAsDouble();
        return (float)numbers.stream().mapToDouble(n -> Math.abs(n - mean)).average().getAsDouble();"
53,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // remove_vowels is a function that takes string and returns string without vowels.
    // >>> removeVowels((""""))
    // ("""")
    // >>> removeVowels((""abcdef""))
    // (""bcdf"")
    // >>> removeVowels((""aaaaa""))
    // ("""")
    // >>> removeVowels((""aaBAA""))
    // (""B"")
    // >>> removeVowels((""zbcd""))
    // (""zbcd"")
    public static String removeVowels(String text) {
        String vowels = ""aeiouAEIOU"";
        String newText = """";
        for (int"," i = 0; i < text.length(); i++) {
            if (vowels.indexOf(text.charAt(i)) == -1) {
                newText += text.charAt(i);
            }
        }
        return newText;"
54,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return true if all numbers in the array list l are below threshold t.
    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l))), (100l))
    // (true)
    // >>> belowThreshold((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))), (5l))
    // (false)
    public static boolean belowThreshold(ArrayList<Long> l, long t) {
        Long[] a = l.toArray(new Long[l.size()]);
        for (int"," i = 0; i < a.length; i++) {
            if (a[i] >= t) {
                return false;
            }
        }
        return true;"
55,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // brackets is a string of ""<"" and "">"".
    // return true if every opening bracket has a corresponding closing bracket.
    // >>> correctBracketing((""<""))
    // (false)
    // >>> correctBracketing((""<>""))
    // (true)
    // >>> correctBracketing((""<<><>>""))
    // (true)
    // >>> correctBracketing((""><<>""))
    // (false)
    public static boolean correctBracketing(String brackets) {
        int"," open = 0;
        for (int i = 0; i < brackets.length(); i++) {
            char c = brackets.charAt(i);
            if (c == '<') {
                open++;
            } else {
                open--;
            }
            if (open < 0) {
                return false;
            }
        }
        return open == 0;"
56,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Return true is array list elements are monotonically increasing or decreasing.
    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)20l))))
    // (true)
    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))
    // (false)
    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)0l, (long)-10l))))
    // (true)
    public static boolean monotonic(ArrayList<Long> l) {
        long a = l.get(0);
        boolean inc = true;
        boolean dec = true;
        for (int"," i = 1; i < l.size(); i++) {
            if (l.get(i) < a) {
                inc = false;
            }
            if (l.get(i) > a) {
                dec = false;
            }
            a = l.get(i);
        }
        return inc || dec;"
57,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Insert a number 'delimeter' between every two consecutive elements of input array list `numbers'
    // >>> intersperse((new ArrayList<Long>(Arrays.asList())), (4l))
    // (new ArrayList<Long>(Arrays.asList()))
    // >>> intersperse((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (4l))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)4l, (long)3l)))
    public static ArrayList<Long> intersperse(ArrayList<Long> numbers, long delimeter) {
        ArrayList<Long> result = new ArrayList<Long>();
        for (int"," i = 0; i < (numbers.size()); i++) {
            result.add(numbers.get(i));
            if ((i < (numbers.size() - 1))) {
                result.add(delimeter);
            }
        }
        return result;"
58,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // brackets is a string of ""("" and "")"".
    // return true if every opening bracket has a corresponding closing bracket.
    // >>> correctBracketing((""(""))
    // (false)
    // >>> correctBracketing((""()""))
    // (true)
    // >>> correctBracketing((""(()())""))
    // (true)
    // >>> correctBracketing(("")(()""))
    // (false)
    public static boolean correctBracketing(String brackets) {
        int"," balance = 0;
        for (int i = 0; i < brackets.length(); i++) {
            if (brackets.charAt(i) == '(') {
                balance++;
            } else {
                balance--;
            }
            if (balance < 0) {
                return false;
            }
        }
        return balance == 0;"
59,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // xs represent coefficients of a polynomial.
    // xs[0] + xs[1] * x + xs[2] * x^2 + ....
    // Return derivative of this polynomial in the same form.
    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)3l, (long)1l, (long)2l, (long)4l, (long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)12l, (long)20l)))
    // >>> derivative((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)6l)))
    public static ArrayList<Long> derivative(ArrayList<Long> xs) {
        ArrayList<Long> ans = new ArrayList<Long>();
        for (int"," i = 1; i < xs.size(); i++) {
            ans.add(xs.get(i) * i);
        }
        return ans;"
60,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    // fibfib(0) == 0
    // fibfib(1) == 0
    // fibfib(2) == 1
    // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    // Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    // >>> fibfib((1l))
    // (0l)
    // >>> fibfib((5l))
    // (4l)
    // >>> fibfib((8l))
    // (24l)
    public static long fibfib(long n) {
        if (n == 0) {
            return 0;
        }
        if (n == 1) {
            return 0;
        }
        if (n == 2) {
            return 1;
        }
        long[] memo = new long[(int) n + 1];
        memo[0] = 0;
        memo[1] = 0;
        memo[2] = 1;
        for (int"," i = 3; i <= n; i++) {
            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];
        }
        return memo[(int) n];"
61,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function vowels_count which takes a string representing
    // a word as input and returns the number of vowels in the string.
    // Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    // vowel, but only when it is at the end of the given word.
    // Example:
    // >>> vowelsCount((""abcde""))
    // (2l)
    // >>> vowelsCount((""ACEDY""))
    // (3l)
    public static long vowelsCount(String s) {
        long sum = 0;
        String sUpper = s.toUpperCase();
        int"," lastIndex = sUpper.length() - 1;
        for (int i = 0; i < sUpper.length(); i++) {
            if (sUpper.charAt(i) == 'A' || sUpper.charAt(i) == 'E' || sUpper.charAt(i) == 'I' || sUpper.charAt(i) == 'O' || sUpper.charAt(i) == 'U') {
                sum++;
            }
            if (sUpper.charAt(i) == 'Y' && i == lastIndex) {
                sum++;
            }
        }
        return sum;"
62,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // ""Given an array array list representing a branch of a tree that has non-negative integer nodes
    // your task is to pluck one of the nodes and return it.
    // The plucked node should be the node with the smallest even value.
    // If multiple nodes with the same smallest even value are found return the node that has smallest index.
    // The plucked node should be returned in an array array list, [ smalest_value, its index ],
    // If there are no even values or the given array array list is empty, return [].
    // Example 1:
    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 2:
    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))
    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))
    // Explanation: 2 has the smallest even value, and 2 has the smallest index.
    // Example 3:
    // >>> pluck((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    // Example 4:
    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))
    // Explanation: 0 is the smallest value, but  there are two zeros,
    // so we will choose the first zero, which has the smallest index.
    // Constraints:
    // * 1 <= nodes.length <= 10000
    // * 0 <= node.value
    public static ArrayList<Long> pluck(ArrayList<Long> arr) {
        int"," minIndex = -1;
        long minValue = -1;
        for (int i = 0; i < arr.size(); i++) {
            if (arr.get(i) % 2 == 0) {
                if (minIndex == -1 || arr.get(i) < minValue) {
                    minIndex = i;
                    minValue = arr.get(i);
                }
            }
        }
        ArrayList<Long> newArr = new ArrayList<Long>();
        if (minIndex == -1) {
            return newArr;
        }
        newArr.add(minValue);
        newArr.add((long)minIndex);
        return newArr;"
63,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given a non-empty array list of positive integers. Return the greatest integer that is greater than 
    // zero, and has a frequency greater than or equal to the value of the integer itself. 
    // The frequency of an integer is the number of times it appears in the array list.
    // If no such a value exist, return -1.
    // Examples:
    // >>> search((new ArrayList<Long>(Arrays.asList((long)4l, (long)1l, (long)2l, (long)2l, (long)3l, (long)1l))))
    // (2l)
    // >>> search((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l, (long)4l))))
    // (3l)
    // >>> search((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)4l, (long)4l, (long)4l))))
    // (-1l)
    public static long search(ArrayList<Long> lst) {
        HashMap<Long, Long> map = new HashMap<Long, Long>();
        Long max = (long)-1;
        for (int"," i = 0; i < lst.size(); i++) {
            long val = lst.get(i);
            if (map.containsKey(val)) {
                map.put(val, map.get(val) + 1);
            } else {
                map.put(val, (long)1);
            }
            if (map.get(val) >= val && val > max) {
                max = val;
            }
        }
        return max;"
64,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given array list of integers, return array list in strange order.
    // Strange sorting, is when you start with the minimum value,
    // then maximum of the remaining integers, then minimum and so on.
    // Examples:
    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)4l, (long)2l, (long)3l)))
    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l))))
    // (new ArrayList<Long>(Arrays.asList((long)5l, (long)5l, (long)5l, (long)5l)))
    // >>> strangeSortList((new ArrayList<Long>(Arrays.asList())))
    // (new ArrayList<Long>(Arrays.asList()))
    public static ArrayList<Long> strangeSortList(ArrayList<Long> lst) {
        // BEGIN SOLUTION
        if (lst.size() <= 1) {
            return lst;
        }
        ArrayList<Long> result = new ArrayList<Long>();
        ArrayList<Long> sorted = new ArrayList<Long>(lst);
        Collections.sort(sorted);
        int"," min = 0;
        int max = sorted.size() - 1;
        while (min <= max) {
            result.add(sorted.get(min));
            min++;
            if (min <= max) {
                result.add(sorted.get(max));
                max--;
            }
        }
        return result;
        // END SOLUTION"
65,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function that returns true if the object q will fly, and false otherwise.
    // The object q will fly if it's balanced (it is a palindromic array list) and the sum of its elements is less than or equal the maximum possible weight w.
    // Example:
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l))), (5l))
    // (false)
    // # 1+2 is less than the maximum possible weight, but it's unbalanced.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (1l))
    // (false)
    // # it's balanced, but 3+2+3 is more than the maximum possible weight.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l, (long)2l, (long)3l))), (9l))
    // (true)
    // # 3+2+3 is less than the maximum possible weight, and it's balanced.
    // >>> willItFly((new ArrayList<Long>(Arrays.asList((long)3l))), (5l))
    // (true)
    // # 3 is less than the maximum possible weight, and it's balanced.
    public static boolean willItFly(ArrayList<Long> q, long w) {
        if (q.size() == 0) {
            return false;
        }
        if (q.size() == 1) {
            return true;
        }
        // add all elements
        Long sum = 0l;
        for (int"," i = 0; i < q.size(); i++) {
            sum += q.get(i);
        }
        if (sum > w) {
            return false;
        }
        // check if the object is balanced
        for (int i = 0; i < q.size() / 2; i++) {
            if (q.get(i) != q.get(q.size() - 1 - i)) {
                return false;
            }
        }
        return true;"
66,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given an array array list arr of integers, find the minimum number of elements that
    // need to be changed to make the array array list palindromic. A palindromic array array list is an array array list that
    // is read the same backwards and forwards. In one change, you can change one element to any other element.
    // For example:
    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)5l, (long)4l, (long)7l, (long)9l, (long)6l))))
    // (4l)
    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)3l, (long)2l, (long)2l))))
    // (1l)
    // >>> smallestChange((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)1l))))
    // (0l)
    public static long smallestChange(ArrayList<Long> arr) {
        // Write your code here
        // To print"," results to the standard output you can use System.out.println()
        // Example: System.out.println(""Hello world!"");
        int first = 0;
        int last = arr.size() - 1;
        int count = 0;
        while (first < last) {
            if (arr.get(first) != arr.get(last)) {
                count++;
            }
            first++;
            last--;
        }
        return count;"
67,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function that accepts two array lists of strings and returns the array list that has 
    // total number of chars in the all strings of the array list less than the other array list.
    // if the two array lists have the same number of chars, return the first array list.
    // Examples
    // >>> totalMatch((new ArrayList<String>(Arrays.asList())), (new ArrayList<String>(Arrays.asList())))
    // (new ArrayList<String>(Arrays.asList()))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi""))))
    // (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""Hi"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""hi"", (String)""admin"", (String)""project""))))
    // (new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""hi"", (String)""admin""))), (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi""))))
    // (new ArrayList<String>(Arrays.asList((String)""hI"", (String)""hi"", (String)""hi"")))
    // >>> totalMatch((new ArrayList<String>(Arrays.asList((String)""4""))), (new ArrayList<String>(Arrays.asList((String)""1"", (String)""2"", (String)""3"", (String)""4"", (String)""5""))))
    // (new ArrayList<String>(Arrays.asList((String)""4"")))
    public static ArrayList<String> totalMatch(ArrayList<String> lst1, ArrayList<String> lst2) {
        int"," sum1 = 0;
        int sum2 = 0;
        for (String s : lst1) {
            sum1 += s.length();
        }
        for (String s : lst2) {
            sum2 += s.length();
        }
        if (sum1 <= sum2) {
            return lst1;
        } else {
            return lst2;
        }"
68,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You have been tasked to write a function that receives 
    // a hexadecimal number as a string and counts the number of hexadecimal 
    // digits that are primes (prime number, or a prime, is a natural number 
    // greater than 1 that is not a product of two smaller natural numbers).
    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    // So you have to determine a number of the following digits: 2, 3, 5, 7, 
    // B (=decimal 11), D (=decimal 13).
    // Note: you may assume the input is always correct or empty string, 
    // and symbols A,B,C,D,E,F are always uppercase.
    // Examples:
    // >>> hexKey((""AB""))
    // (1l)
    // >>> hexKey((""1077E""))
    // (2l)
    // >>> hexKey((""ABED1A33""))
    // (4l)
    // >>> hexKey((""123456789ABCDEF0""))
    // (6l)
    // >>> hexKey((""2020""))
    // (2l)
    public static long hexKey(String num) {
      long result = 0;
      for (int"," i = 0; i < num.length(); i++) {
        if (num.charAt(i) == '2' || num.charAt(i) == '3' || num.charAt(i) == '5' || num.charAt(i) == '7' || num.charAt(i) == 'B' || num.charAt(i) == 'D') {
          result++;
        }
      }
      return result;"
69,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // It is the last week of the semester and the teacher has to give the grades
    // to students. The teacher has been making her own algorithm for grading.
    // The only problem is, she has lost the code she used for grading.
    // She has given you an array array list of GPAs for some students and you have to write 
    // a function that can output an array array list of letter grades using the following table:
    // GPA       |    Letter grade
    // 4.0                A+
    // > 3.7                A 
    // > 3.3                A- 
    // > 3.0                B+
    // > 2.7                B 
    // > 2.3                B-
    // > 2.0                C+
    // > 1.7                C
    // > 1.3                C-
    // > 1.0                D+ 
    // > 0.7                D 
    // > 0.0                D-
    // 0.0                E
    // Example:
    // >>> gradeEquation((new ArrayList<Float>(Arrays.asList((float)4.0f, (float)3l, (float)1.7f, (float)2l, (float)3.5f))))
    // (new ArrayList<String>(Arrays.asList((String)""A+"", (String)""B"", (String)""C-"", (String)""C"", (String)""A-"")))
    public static ArrayList<String> numericalLetterGrade(ArrayList<Float> grades) {
        ArrayList<String> letterGrades = new ArrayList<String>();
        for (int"," i = 0; i < grades.size(); i++) {
            float currentGrade = grades.get(i);
            if (currentGrade == 4.0f) {
                letterGrades.add(""A+"");
            } else if (currentGrade > 3.7f) {
                letterGrades.add(""A"");
            } else if (currentGrade > 3.3f) {
                letterGrades.add(""A-"");
            } else if (currentGrade > 3.0f) {
                letterGrades.add(""B+"");
            } else if (currentGrade > 2.7f) {
                letterGrades.add(""B"");
            } else if (currentGrade > 2.3f) {
                letterGrades.add(""B-"");
            } else if (currentGrade > 2.0f) {
                letterGrades.add(""C+"");
            } else if (currentGrade > 1.7f) {
                letterGrades.add(""C"");
            } else if (currentGrade > 1.3f) {
                letterGrades.add(""C-"");
            } else if (currentGrade > 1.0f) {
                letterGrades.add(""D+"");
            } else if (currentGrade > 0.7f) {
                letterGrades.add(""D"");
            } else if (currentGrade > 0.0f) {
                letterGrades.add(""D-"");
            } else {
                letterGrades.add(""E"");
            }
        }
        return letterGrades;"
70,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Given a non-empty array list of integers lst. add the even elements that are at odd indices..
    // Examples:
    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)6l, (long)7l))))
    // (2l)
    public static long add(ArrayList<Long> lst) {
        long sum = 0;
        for (int"," i = 0; i < lst.size(); i++) {
            if (i % 2 == 1 && lst.get(i) % 2 == 0) {
                sum += lst.get(i);
            }
        }
        return sum;"
71,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // Write a function that takes a message, and encodes in such a 
    // way that it swaps case of all letters, replaces all vowels in 
    // the message with the letter that appears 2 places ahead of that 
    // vowel in the english alphabet. 
    // Assume only letters. 
    // Examples:
    // >>> encode((""test""))
    // (""TGST"")
    // >>> encode((""This is a message""))
    // (""tHKS KS C MGSSCGG"")
    public static String encode(String message) {
        char[] arr = message.toCharArray();
        char[] vowels = ""AEIOUaeiou"".toCharArray();
        for (int"," i = 0; i < arr.length; i++) {
            if (Arrays.binarySearch(vowels, arr[i]) > -1) {
                arr[i] = (char) (arr[i] + 2);
            }
            if (Character.isUpperCase(arr[i])) {
                arr[i] = Character.toLowerCase(arr[i]);
            } else {
                arr[i] = Character.toUpperCase(arr[i]);
            }
        }
        return new String(arr);"
72,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // You are given an array array list of integers.
    // You need to find the largest prime value and return the sum of its digits.
    // Examples:
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)3l, (long)2l, (long)1l, (long)3l, (long)5l, (long)7l, (long)4l, (long)5l, (long)5l, (long)5l, (long)2l, (long)181l, (long)32l, (long)4l, (long)32l, (long)3l, (long)2l, (long)32l, (long)324l, (long)4l, (long)3l))))
    // (10l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)0l, (long)1l, (long)8l, (long)2l, (long)4597l, (long)2l, (long)1l, (long)3l, (long)40l, (long)1l, (long)2l, (long)1l, (long)2l, (long)4l, (long)2l, (long)5l, (long)1l))))
    // (25l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)1l, (long)3l, (long)1l, (long)32l, (long)5107l, (long)34l, (long)83278l, (long)109l, (long)163l, (long)23l, (long)2323l, (long)32l, (long)30l, (long)1l, (long)9l, (long)3l))))
    // (13l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)724l, (long)32l, (long)71l, (long)99l, (long)32l, (long)6l, (long)0l, (long)5l, (long)91l, (long)83l, (long)0l, (long)5l, (long)6l))))
    // (11l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)81l, (long)12l, (long)3l, (long)1l, (long)21l))))
    // (3l)
    // >>> skjkasdkd((new ArrayList<Long>(Arrays.asList((long)0l, (long)8l, (long)1l, (long)2l, (long)1l, (long)7l))))
    // (7l)
    public static long skjkasdkd(ArrayList<Long> lst) {
        long largestPrime = 0l;
        for (Long item : lst) {
            long number = item;
            int"," counter = 0;
            if (item == 1) {
                continue;
            }
            if (item == 2) {
                counter = 1;
            }
            else {
                int l = 1;
                while (l <= (int) number) {
                    if (number % l == 0) {
                        counter++;
                    }
                    l++;
                }
            }
            if (counter == 2) {
                if (number > largestPrime) {
                    largestPrime = number;
                }
            }
        }
        if (largestPrime == 0) {
            return 0l;
        }
        else {
            long output = 0l;
            while (largestPrime > 0) {
                output += largestPrime % 10;
                largestPrime /= 10;
            }
            return output;
        }"
73,"import java.util.*;
import java.lang.reflect.*;
import org.javatuples.*;
import java.security.*;
import java.math.*;
import java.io.*;
import java.util.stream.*;
class Problem {
    // From a given array list of integers, generate an array array list of rolling maximum element found until given moment
    // in the sequence.
    // >>> rollingMax((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)2l, (long)3l, (long)4l, (long)2l))))
    // (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)3l, (long)3l, (long)4l, (long)4l)))
    public static ArrayList<Long> rollingMax(ArrayList<Long> numbers) {
        // Add your implementation here
        ArrayList<Long> results = new ArrayList<Long>();
        for (int"," i = 0; i < numbers.size(); i++) {
            results.add(numbers.subList(0, i + 1).stream().max(Long::compare).get());
        }
        return results;"
